Index: include/Warrior.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Player.h\"\n\nclass Warrior : public Player {\npublic:\n\n\nprivate:\n\n\n\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/Warrior.h b/include/Warrior.h
--- a/include/Warrior.h	
+++ b/include/Warrior.h	
@@ -2,7 +2,7 @@
 
 class Warrior : public Player {
 public:
-
+using Player::Player;
 
 private:
 
Index: resources/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>configure_file (\"Title.png\" ${CMAKE_BINARY_DIR} COPYONLY)\nconfigure_file (\"arcadeClassic.ttf\" ${CMAKE_BINARY_DIR} COPYONLY)\nconfigure_file (\"skeleton2_v2.png\" ${CMAKE_BINARY_DIR} COPYONLY)\nconfigure_file (\"Help.png\" ${CMAKE_BINARY_DIR} COPYONLY)\nconfigure_file (\"W_Red_Idle_SPR.png\" ${CMAKE_BINARY_DIR} COPYONLY)\nconfigure_file (\"test.png\" ${CMAKE_BINARY_DIR} COPYONLY)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/CMakeLists.txt b/resources/CMakeLists.txt
--- a/resources/CMakeLists.txt	
+++ b/resources/CMakeLists.txt	
@@ -3,4 +3,4 @@
 configure_file ("skeleton2_v2.png" ${CMAKE_BINARY_DIR} COPYONLY)
 configure_file ("Help.png" ${CMAKE_BINARY_DIR} COPYONLY)
 configure_file ("W_Red_Idle_SPR.png" ${CMAKE_BINARY_DIR} COPYONLY)
-configure_file ("test.png" ${CMAKE_BINARY_DIR} COPYONLY)
\ No newline at end of file
+configure_file ("Warioir.png" ${CMAKE_BINARY_DIR} COPYONLY)
\ No newline at end of file
Index: include/GameController.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#pragma once\n#include <vector>\n#include \"Window.h\"\n#include \"GameObject.h\"\n#include \"MainMenu.h\"\n\nusing std::vector;\n\nclass GameController {\n\npublic:\n\t\n\tGameController();\n\n\tvoid run();\n    bool isRuning();\n\tvoid handleKey();\n\n\nprivate:\n    bool runing=true;\n    MainMenu mainMenu;\n    sf::RenderWindow m_window;\n\tvector <GameObject> m_gameObjects;\n\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/GameController.h b/include/GameController.h
--- a/include/GameController.h	
+++ b/include/GameController.h	
@@ -3,7 +3,7 @@
 #include "Window.h"
 #include "GameObject.h"
 #include "MainMenu.h"
-
+#include "Game.h"
 using std::vector;
 
 class GameController {
@@ -13,14 +13,16 @@
 	GameController();
 
 	void run();
-    bool isRuning();
-	void handleKey();
+   // bool isRuning();
+	//void handleKey();
 
 
 private:
     bool runing=true;
     MainMenu mainMenu;
+    Game game;
     sf::RenderWindow m_window;
 	vector <GameObject> m_gameObjects;
 
+    void runGame(sf::RenderWindow &window);
 };
\ No newline at end of file
Index: src/GameController.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n#include \"GameController.h\"\n\n#include <iostream>\n\nusing std::cout;\nusing std::endl;\n\n\nGameController::GameController()\n\n{\n\n}\n\n\nvoid GameController::run()\n{\n    sf::RenderWindow window(sf::VideoMode(1400, 700), \"Save The king Dungen edition\");\n    mainMenu.run(window);\n    std::cout << \"in game controller\";\n\twhile (window.isOpen())\n\t{\n\n        sf::Event event;\n\n        while (window.pollEvent(event))\n        {\n            if (event.type == sf::Event::Closed)\n                window.close();\n        }\n        window.clear(sf::Color(34,20,26));\n\n\n\n        window.display();\n\n\t\thandleKey();\n\t}\n}\n\nvoid GameController::handleKey()\n{\n\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))\n\t\tcout << \"wat\" << endl;\n\n\telse if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))\n\t\tcout << \"ey\" << endl;\n\n\telse if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape))\n    {\n        runing=false;\n    }\n\n}\nbool GameController:: isRuning()\n{\n    return runing;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameController.cpp b/src/GameController.cpp
--- a/src/GameController.cpp	
+++ b/src/GameController.cpp	
@@ -7,53 +7,65 @@
 using std::endl;
 
 
-GameController::GameController()
-
-{
+GameController::GameController() {
 
 }
 
 
-void GameController::run()
-{
+void GameController::run() {
+
     sf::RenderWindow window(sf::VideoMode(1400, 700), "Save The king Dungen edition");
-    mainMenu.run(window);
+
     std::cout << "in game controller";
-	while (window.isOpen())
-	{
+
+
+
+        while (window.isOpen()) {
+
 
-        sf::Event event;
+            sf::Event event;
 
-        while (window.pollEvent(event))
-        {
-            if (event.type == sf::Event::Closed)
-                window.close();
+         while (window.pollEvent(event)) {
+                if (event.type == sf::Event::Closed)
+                    window.close();
+            }
+
+            mainMenu.run(window);
+            game.run(window);
         }
-        window.clear(sf::Color(34,20,26));
+
+
+
+}
+/*
+void GameController::runGame(sf::RenderWindow &window) {
+    window.clear(sf::Color(34, 20, 26));
 
 
-
-        window.display();
+    window.display();
 
-		handleKey();
-	}
+    handleKey();
+    if(!runing)
+    {
+        cout <<"out";
+
+    }
 }
 
-void GameController::handleKey()
-{
-	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))
-		cout << "wat" << endl;
+void GameController::handleKey() {
+    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))
+        cout << "wat" << endl;
 
-	else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
-		cout << "ey" << endl;
+    else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
+        cout << "ey" << endl;
 
-	else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape))
-    {
-        runing=false;
+    else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
+        cout <<"esxc\n";
+        runing = false;
     }
 
 }
-bool GameController:: isRuning()
-{
+
+bool GameController::isRuning() {
     return runing;
-}
\ No newline at end of file
+}*/
\ No newline at end of file
Index: src/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>target_sources (${CMAKE_PROJECT_NAME} PRIVATE \"main.cpp\" \"GameObject.cpp\"  \"Moving.cpp\"  \"Dwarf.cpp\" \"Player.cpp\" \"King.cpp\" \n\t\t\t\t\t\t\t\t\t\t\t\"Thief.cpp\" \"Warrior.cpp\" \"Mage.cpp\" \"Static.cpp\" \"Key.cpp\" \"Throne.cpp\" \"Wall.cpp\" \n\t\t\t\t\t\t\t\t\t\t\t\"Fire.cpp\" \"Orc.cpp\" \"Gate.cpp\" \"Gift.cpp\" \"AddTime.cpp\" \"SubTime.cpp\" \"DestDwarf.cpp\" \n\t\t\t\t\t\t\t\t\t\t\t\"Window.cpp\" \"Board.cpp\" \"Menu.cpp\" \"GameController.cpp\"\"MainMenu.cpp\"\"Button.cpp\"\"Animation.cpp\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt	
+++ b/src/CMakeLists.txt	
@@ -1,4 +1,4 @@
 target_sources (${CMAKE_PROJECT_NAME} PRIVATE "main.cpp" "GameObject.cpp"  "Moving.cpp"  "Dwarf.cpp" "Player.cpp" "King.cpp" 
 											"Thief.cpp" "Warrior.cpp" "Mage.cpp" "Static.cpp" "Key.cpp" "Throne.cpp" "Wall.cpp" 
 											"Fire.cpp" "Orc.cpp" "Gate.cpp" "Gift.cpp" "AddTime.cpp" "SubTime.cpp" "DestDwarf.cpp" 
-											"Window.cpp" "Board.cpp" "Menu.cpp" "GameController.cpp""MainMenu.cpp""Button.cpp""Animation.cpp")
\ No newline at end of file
+											"Window.cpp" "Board.cpp" "Menu.cpp" "GameController.cpp""MainMenu.cpp""Button.cpp""Animation.cpp""Game.cpp")
\ No newline at end of file
Index: include/Player.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Moving.h\"\n\nclass Player : public Moving {\npublic:\n\nusing Moving::Moving;\nprivate:\n    string m_imagePath;\n\n\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/Player.h b/include/Player.h
--- a/include/Player.h	
+++ b/include/Player.h	
@@ -1,3 +1,4 @@
+#pragma once
 #include "Moving.h"
 
 class Player : public Moving {
Index: include/Static.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"GameObject.h\"\n\nclass Static : public GameObject {\n\npublic:\n\n\nprivate:\n\n\n\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/Static.h b/include/Static.h
--- a/include/Static.h	
+++ b/include/Static.h	
@@ -3,7 +3,7 @@
 class Static : public GameObject {
 
 public:
-
+using GameObject:: GameObject;
 
 private:
 
Index: src/Game.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Game.cpp b/src/Game.cpp
new file mode 100644
--- /dev/null	
+++ b/src/Game.cpp	
@@ -0,0 +1,68 @@
+
+#include "Game.h"
+
+#include <iostream>
+
+using std::cout;
+using std::endl;
+
+
+Game::Game() {
+
+}
+
+
+void Game::run(sf::RenderWindow & window) {
+
+    std::cout << "in game controller";
+
+
+
+    while (window.isOpen()) {
+
+        sf::Event event;
+
+        while (window.pollEvent(event)) {
+            if (event.type == sf::Event::Closed)
+                window.close();
+        }
+        window.clear(sf::Color(34, 20, 26));
+
+
+        window.display();
+
+        handleKey();
+        if (!runing) {
+            cout<<"not runing";
+            return;
+
+
+        }
+    }
+
+
+
+}
+
+void Game::runGame(sf::RenderWindow &window) {
+
+
+}
+
+void Game::handleKey() {
+    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))
+        cout << "wat" << endl;
+
+    else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
+        cout << "ey" << endl;
+
+    else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
+        cout <<"esxc\n";
+        runing = false;
+    }
+
+}
+
+bool Game::isRuning() {
+    return runing;
+}
\ No newline at end of file
Index: include/Game.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/Game.h b/include/Game.h
new file mode 100644
--- /dev/null	
+++ b/include/Game.h	
@@ -0,0 +1,25 @@
+#pragma once
+#include <vector>
+#include "Window.h"
+#include "GameObject.h"
+
+using std::vector;
+
+class Game {
+
+public:
+
+    Game();
+
+    void run(sf::RenderWindow & window);
+    bool isRuning();
+    void handleKey();
+    void runGame(sf::RenderWindow & window);
+
+
+private:
+    bool runing=true;
+    sf::RenderWindow m_window;
+    vector <GameObject> m_gameObjects;
+
+};
\ No newline at end of file
Index: include/Orc.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Static.h\"\n\n\nclass Orc : public Static {\npublic:\n\nprivate:\n\n\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/Orc.h b/include/Orc.h
--- a/include/Orc.h	
+++ b/include/Orc.h	
@@ -3,7 +3,7 @@
 
 class Orc : public Static {
 public:
-
+using Static::Static;
 private:
 
 
